.TH "bowsprit" "7" "2015-09-03" "Bowsprit" "Bowsprit\ documentation"
.SH NAME
.PP
bowsprit \[en] Generating collectd\-style statistics in C
.SH SYNOPSIS
.PP
\f[B]#include <bowsprit.h>\f[]
.PP
$ \f[B]cc\f[] [\f[I]flags\f[]] \f[I]files\f[] \f[B]\-lbowsprit\f[]
[\f[I]libraries\f[]]
.PP
$ \f[B]pkg\-config\f[] \f[B]\[en]modversion\f[] \f[B]bowsprit\f[]
.SH DESCRIPTION
.PP
Bowsprit is a library for generating
collectd (https://collectd.org/)\-style statistics from a C application.
Normally, you'll have a collectd instance running somewhere that you can
send the statistics too (either on the same machine or nearby on the
local network).
The library also provides some basic support for collecting and
displaying the statistics without a collectd instance, which can be
useful during development and in your test cases.
.PP
Bowsprit follows the collectd naming conventions as much as possible.
You create one or more \f[I]measurements\f[], each of which belongs to a
\f[I]plugin\f[].
.PP
Each measurement has a \f[I]type name\f[] and one or more
\f[I]values\f[].
Measurements can also have an optional \f[I]type instance\f[], which can
be used to distinguish between multiple measurements in the same plugin
that all have the same type name.
.PP
The measurement's type name is an index into collectd's
\f[B]types.db\f[](5) file, and defines how many values the measurement
has, and the \f[I]kind\f[] of each value.
There are four available kinds: \f[I]absolute\f[], \f[I]counter\f[],
\f[I]derive\f[], and \f[I]gauge\f[].
Gauge and derive are the most common.
Use a gauge for a measurement that can go up and down arbitrarily, such
as \[lq]current memory usage\[rq].
Use a derive for a counter that is not likely to overflow, such as
\[lq]number of packets processed\[rq].
A counter is similar to a derive, but is used for small counters that
are likely to wrap, such as a TCP sequence number; collectd will take
this into account when calculating rates.
An absolute is like a gauge that resets to 0 every time it's read.
.PP
A plugin is a collection of measurements that all describe the same
portion of code.
(The name doesn't really have anything to do with loadable code modules;
it's just the collectd synonym for \[lq]component\[rq] or
\[lq]subsystem\[rq].) Plugins have a \f[I]name\f[] and an optional
\f[I]instance\f[]; just like with measurements, the instance can be used
to distinguish between multiple plugins with the same name.
.PP
As an application or library designer, it's your responsibility to
choose plugin and measurement names that are descriptive and meaningful.
Your monitoring processes will use these names as\-is, so choose them
with an eye towards making your downstream logging and analytics as easy
to understand as possible.
