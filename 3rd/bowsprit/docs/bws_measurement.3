.TH "bws_measurement" "3" "2015-09-03" "Bowsprit" "Bowsprit\ documentation"
.SH NAME
.PP
bws_measurement \[en] Measurements
.SH SYNOPSIS
.PP
\f[B]#include <bowsprit.h>\f[]
.PP
\f[B]struct bws_measurement\f[] {
.PD 0
.P
.PD
\ \ \ \ struct bws_plugin *\f[I]plugin\f[];
.PD 0
.P
.PD
\ \ \ \ const char *\f[I]type_name\f[];
.PD 0
.P
.PD
\ \ \ \ const char *\f[I]type_instance\f[];
.PD 0
.P
.PD
};
.PP
struct bws_measurement *
.PD 0
.P
.PD
\f[B]bws_measurement_new\f[](struct bws_plugin *\f[I]plugin\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const char *\f[I]type_name\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const char
*\f[I]type_instance\f[]);
.SH DESCRIPTION
.PP
A \f[B]bws_measurement\f[] instance represents an individual
\f[I]measurement\f[] that you would like to provide values for over the
course of your application's execution.
.PP
Each measurement can have one or more \f[I]values\f[].
Each value can change over time.
Most measurements have a single value \[em] for instance, the current
amount of memory used by the process.
Some have multiple values \[em] for instance, separately recording the
number of bytes transmitted and received for a network interface.
(The interface would be represented by a measurement, and the
transmitted and received counts be values in that measurement.)
.PP
Each measurement has a \f[I]type name\f[], and can also have an optional
\f[I]type instance\f[], which can be used to distinguish between
multiple measurements in the same plugin that all have the same type
name.
The measurement's type name is an index into collectd's
\f[B]types.db\f[](5) file, and defines how many values the measurement
has, and the \f[I]kind\f[] of each value.
There are four available kinds: \f[I]absolute\f[], \f[I]counter\f[],
\f[I]derive\f[], and \f[I]gauge\f[].
Gauge and derive are the most common.
Use a gauge for a measurement that can go up and down arbitrarily, such
as \[lq]current memory usage\[rq].
Use a derive for a counter that is not likely to overflow, such as
\[lq]number of packets processed\[rq].
A counter is similar to a derive, but is used for small counters that
are likely to wrap, such as a TCP sequence number; collectd will take
this into account when calculating rates.
An absolute is like a gauge that resets to 0 every time it's read.
.PP
Note that it's your responsibility to ensure that the \f[I]type_name\f[]
refers to a type that actually exists in \f[B]types.db\f[](5).
It's also your responsibility to make sure that the values that you add
to the measurement \[lq]line up\[rq] with the definition of the type
that you choose.
We don't verify either of those \[em] if you create an inconsistent
measurement, we'll happily let you update the values and try to send the
collected statistics to a collectd server, but the server might reject
the statistics when it receives them.
.PP
\f[B]bws_measurement_new\f[]() creates a new measurement object in the
given plugin.
The measurement's \f[I]type_name\f[] must not be \f[C]NULL\f[]; its
\f[I]type_instance\f[] can be \f[C]NULL\f[].
We will make our own copy of \f[I]type_name\f[] and
\f[I]type_instance\f[], so it's safe for you to pass in a string that
you'll later overwrite or free.
The measurement will initially have no values in it; use
\f[B]bws_measurement_add_gauge\f[]() to add some values.
(For the common case of single\-value measurements, you can also use the
\f[B]bws_gauge_new\f[]() helper constructor.)
.PP
Note that you cannot explicitly free a measurement object yourself; the
measurement will be automatically freed when its context is freed.
.SH RETURN VALUES
.PP
\f[B]bws_measurement_new\f[]() always returns a valid new measurement
object.
If there are any memory allocation errors, we will abort the process.
